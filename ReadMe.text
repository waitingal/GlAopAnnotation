配置方法：

1.项目主Module添加当前依赖Module（GlAopAnnotation）

2.项目根目录build.gradle里的dependencies添加：
   classpath 'org.aspectj:aspectjtools:1.8.9'
   classpath 'org.aspectj:aspectjweaver:1.8.9'

   例如：
   dependencies {
           classpath 'com.android.tools.build:gradle:2.1.0'
           classpath 'org.aspectj:aspectjtools:1.8.9'
           classpath 'org.aspectj:aspectjweaver:1.8.9'
           }

3.项目主Module的build.gradle里添加如下配置：
            //---------配置开始------
           import com.android.build.gradle.LibraryPlugin
           import org.aspectj.bridge.IMessage
           import org.aspectj.bridge.MessageHandler
           import org.aspectj.tools.ajc.Main

           buildscript {
               repositories {
                   mavenCentral()
               }
               dependencies {
                   classpath 'org.aspectj:aspectjtools:1.8.9'
                   //classpath 'org.aspectj:aspectjweaver:1.8.9'
               }

           }

           final def log = project.logger
           final def variants = project.android.applicationVariants
           variants.all { variant ->
               if (!variant.buildType.isDebuggable()) {
                   log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
                   return;
               }
               JavaCompile javaCompile = variant.javaCompile
               javaCompile.doLast {
                   String[] args = ["-showWeaveInfo",
                                    "-1.5",//1.8是为了兼容java 8。请根据自己java的版本合理设置它
                                    "-inpath", javaCompile.destinationDir.toString(),
                                    "-aspectpath", javaCompile.classpath.asPath,
                                    "-d", javaCompile.destinationDir.toString(),
                                    "-classpath", javaCompile.classpath.asPath,
                                    "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
                   log.debug "ajc args: " + Arrays.toString(args)
                   MessageHandler handler = new MessageHandler(true);
                   new Main().run(args, handler);
                   for (IMessage message : handler.getMessages(null, true)) {
                       switch (message.getKind()) {
                           case IMessage.ABORT:
                           case IMessage.ERROR:
                           case IMessage.FAIL:
                               log.error message.message, message.thrown
                               break;
                           case IMessage.WARNING:
                               log.warn message.message, message.thrown
                               break;
                           case IMessage.INFO:
                               log.info message.message, message.thrown
                               break;
                           case IMessage.DEBUG:
                               log.debug message.message, message.thrown
                               break;
                       }
                   }
               }
           }
            //-------配置结束------

使用方法：

1.防抖
  1.1:在View的OnClickListener接口中的onClick方法添加注解 @ViewOnclickAnnotation(time = 300,tips = "请勿频繁点击")
  1.2:注解参数说明：
      time:时间限制，默认为0
      tips:在时间限制范围内手抖提示语（Toast形式），默认为空,不提示
  1.3:出现手抖不会往下执行

2.网络检测
  2.1:在方法添加注解 @CheckNetAnnotation(netTips = "无网络",NetType= NetType.Mobile/NetType.Wifi/NetType.All/NetType.None)
  2.2:注解参数说明：
      NetType:指定方法执行时的网络类型,默认为NetType.All（Mobile：移动网络 / Wifi：热点  All：有网络并不限制类型 / None：无网络）
      netTips:在不符合网络类型时的提示语（Toast形式），默认为空,不提示
  2.3:出现网络类型不符合时,不往下执行
  2.4:如该注解需要在非Activity 非Fragment 等中使用，需要先使用AnnAopManage设置Context


3.权限申请
  3.1:在Activity或Fragment里的方法添加注解 @PermissionAnnotation(CheckPermission=xxx)
  3.2:注解参数说明：
      CheckPermission:表示需要申请的权限（多个或单个）
  3.3：出现用户不授权的情况下,有Dialog提示,并不往下执行


4.默认设置
   4.1:AnnAopManage.getInstance(Context)
       .setViewClickSpaceTime(200)
       .setViewClickSpaceTips("xxxxxx")
       .setDefaultNetTips("xxxxx");
   4.2:注解中设置参数的优先级  >   默认设置